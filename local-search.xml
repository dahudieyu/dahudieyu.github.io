<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>点单商城全栈项目</title>
    <link href="/2025/01/13/%E7%82%B9%E5%8D%95%E5%95%86%E5%9F%8E%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE/"/>
    <url>/2025/01/13/%E7%82%B9%E5%8D%95%E5%95%86%E5%9F%8E%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>自己花了几天时间，用 mysql + html + css + js + springboot 搭建了一个点单商城的全栈项目，项目地址：<a href="https://github.com/dahudieyu/OnlineShopping">点单商城</a>。</p><p><strong>技术栈：</strong></p><ul><li>mysql：数据库</li><li>html：前端页面</li><li>css：页面美化</li><li>js：页面交互</li><li>springboot：后端框架</li></ul><p><strong>项目的功能主要是：</strong></p><ul><li>用户注册、登录、注销</li><li>商品列表、商品详情</li><li>购物车、订单</li><li>后台管理<br>（支付暂且没有）</li></ul><p><strong>项目的部署主要分为：</strong><br>略</p><p><strong>项目的开发环境：</strong></p><ul><li>IDE：IntelliJ IDEA</li><li>数据库：mysql 8.0</li><li>后端：jdk 1.8 + springboot 2.3.1</li><li>前端：html + css + js</li></ul><p><strong>项目的运行截图：</strong><br>略</p><p><strong>具体流程：</strong><br>   用户访问主页面，也就是点单的界面，aop会检测是否携带着token（这里的token也携带着加密的用户信息，包括username，password，permission），如果没有携带，则会跳转到登录页面，如果携带了，就会判断用户的permission，user 和 admin 都有权限，可以访问后台管理页面，如果是普通用户，则只能访问商品列表页面。</p><p>这里的讲解会分前后端来讲解，保证看完这个简单的例子，实现新手的从 0 到 1 的开发体验。</p><h1 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h1><p>   前端是使用html+css+js来实现的，主要是实现了商品列表页面，商品详情页面，购物车页面，订单页面，登录页面，注册页面等。其实最主要的还是js的用法，这里的js是借用jQUery库来实现，而post和get的请求也是借助ajax来实现的。<br>   这里有一个小插曲，我为每一个访问的路径都写了一个get或者post请求，但是学长看了我写的代码，让我修改成统一的请求方式，如下图：<br>   <img src="/2025/01/13/%E7%82%B9%E5%8D%95%E5%95%86%E5%9F%8E%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE/code1.png" alt="get-post函数封装"><br>    这是一个重要的思想，在学长的点拨之后，·我开始思考如何封装一个通用的请求函数，使得所有的请求都可以统一调用，而不是每个页面都写一遍请求代码。</p><h1 id="后端："><a href="#后端：" class="headerlink" title="后端："></a>后端：</h1><p>   后端是使用springboot+mysql来实现的，主要是实现了用户注册、登录、注销，商品列表、商品详情，购物车、订单，后台管理等功能。</p><h2 id="结构的设计："><a href="#结构的设计：" class="headerlink" title="结构的设计："></a>结构的设计：</h2><pre><code class="hljs">先创建几个软件包，aspect（使用aop切面来获取访问的requests），controller（负责处理请求），entity（实体类），service（业务逻辑），repository（数据访问），utils（工具类），config（配置文件，这个配置文件主要为拦截器做配置，因为这里的拦截器是使用aop来实现的，所以不需要在config中配置）。用户对网址的请求，先来到Controller，在被aspect拦截（utils里面的jwtutil定义了一些函数，包括生成jwttoken，验证jwttoken，从jwttoken中获取用户信息等），然后进入到Service层，Service层会调用mapper层，mapper层会访问数据库，然后返回结果给Service层，Service层再返回给Controller层，Controller层再返回给前端页面。</code></pre><h3 id="典型代码讲解："><a href="#典型代码讲解：" class="headerlink" title="典型代码讲解："></a>典型代码讲解：</h3><ol><li>Controller层：<br>如图：<br><img src="/2025/01/13/%E7%82%B9%E5%8D%95%E5%95%86%E5%9F%8E%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE/code2.png" alt="Controller层"></li><li>aspect层（使用aop写的）：<br>如图：<br><img src="/2025/01/13/%E7%82%B9%E5%8D%95%E5%95%86%E5%9F%8E%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE/code3.png" alt="aspect层"></li><li>Service层：<br>如图：<br><img src="/2025/01/13/%E7%82%B9%E5%8D%95%E5%95%86%E5%9F%8E%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE/code4.png" alt="Service层"></li><li>mapper层：<br>如图：<br><img src="/2025/01/13/%E7%82%B9%E5%8D%95%E5%95%86%E5%9F%8E%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE/code5.png" alt="mapper层"></li><li>entity层：<br>如图：<br><img src="/2025/01/13/%E7%82%B9%E5%8D%95%E5%95%86%E5%9F%8E%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE/code5.png" alt="entity层"></li><li>utils层：<br>如图：<br><img src="/2025/01/13/%E7%82%B9%E5%8D%95%E5%95%86%E5%9F%8E%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE/code7.png" alt="utils层.JwtUtil"><br><img src="/2025/01/13/%E7%82%B9%E5%8D%95%E5%95%86%E5%9F%8E%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE/code8.png" alt="utils层.R"></li></ol><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><pre><code class="hljs">food表： id name price category image_urlorder表： id order_id food_id food_name quantity price usernameuser表： id username password permission address</code></pre><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><pre><code class="hljs">想学全栈非常不容易 特别是对我这样人工智能专业（非软件工程专业）的人来说，我是大二上学期了解的全栈，刚开始连java都不会，但是学过cpp和python以及dart来说，java估计也大差不差，在学html和css前端，五排有点学不下去了，就直接看后端的springboot和mybatis框架，这是入门后端最基本的东西，在学长的帮助下，我有着比较清晰的学习方向，了解了aop切面和拦截器。以及多租户的数据隔离还有授权码的jwt。说来也是，我在大致了解这些东西之后，突发奇想的想写一个线上点单的商城，我把电脑搬到学长的实验室，正巧那段时间是期末周，时间可以说是非常充裕把，每天下午两点去敲代码，晚上七点左右回宿舍复习期末，感觉非常充实，在努力了半个月，因为一个月的时间对于又学前端和后端以及再写一个项目出来，对于我来说。确实有点自不量力，我尝试着使用gpt来帮我写点框架，比如简单的前端页面，以及后端的一些接口，我在此基础上进行修改，写出了这个点单商城。我也和学长们打趣到我也算是gpt工程师了，哈哈哈但是学了这些东西，我仍然不知道我以后的方向是什么我曾经在大一的寒假去学习机器学习和深度学习，那是掉头发最快的一个假期，我也使用了开源的代码，自己训练一个问答机器人（以后会分享），因为我本身就是人工智能的专业，当我窥探到这里的的门道，的确很难，几百千的代码，keras，tensorflow，pytorch，还有各种框架，我甚至都不知道自己在干什么。但是当我自己训练出一个机器人之后，发现也还好，果然，代码还是要实践，不是因为别的，我感觉自己把代码敲出来，也不能说敲吧，自己使用所学的写一个常用的东西，真的发现其实很简单，因为在创造的时候，中间遇到不会的，都已经学过了，当结束后，才发现其实也不是很难。就像我的点单商城，我也只是在学习，没有深入，也没有深究，自己写了一些简单的功能，但是我觉得，我已经有了一些基础，我可以尝试着去做一些更有意义的事情。</code></pre>]]></content>
    
    
    <categories>
      
      <category>front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
